generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    STUDENT
    TEACHER
}

model User {
    id       Int    @id @default(autoincrement())
    email    String @unique
    password String

    firstname  String
    middlename String?
    lastname   String

    role Role?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    StudentEnrolledSubject StudentEnrolledSubject[]

    TeacherAssignedSubject TeacherAssignedSubject[]
    AssignmentSubmission   AssignmentSubmission[]
    StudentProgress        StudentProgress[]
    MeetingSession         MeetingSession[]
    QuizSession            QuizSession[]
}

model SchoolYear {
    id Int @id @default(autoincrement())

    yearStart Int
    yearEnd   Int

    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    TeacherAssignedSubject TeacherAssignedSubject[]
}

model TeacherAssignedSubject {
    id Int @id @default(autoincrement())

    teacherId Int
    subjectId Int

    schoolYearId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    teacher                User                     @relation(fields: [teacherId], references: [id])
    subject                Subject                  @relation(fields: [subjectId], references: [id])
    schoolYear             SchoolYear               @relation(fields: [schoolYearId], references: [id])
    StudentEnrolledSubject StudentEnrolledSubject[]
    Assignment             Assignment[]
    MeetingSession         MeetingSession[]
}

model Assignment {
    id Int @id @default(autoincrement())

    title        String
    instructions String?

    teacherAssignedSubjectId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    teacherAssignedSubject TeacherAssignedSubject @relation(fields: [teacherAssignedSubjectId], references: [id])
    AssignmentAttachment   AssignmentAttachment[]
    AssignmentSubmission   AssignmentSubmission[]
}

model AssignmentAttachment {
    id      Int    @id @default(autoincrement())
    fileURL String

    assignmentId Int

    Assignment Assignment @relation(fields: [assignmentId], references: [id])
}

model AssignmentSubmission {
    id      Int     @id @default(autoincrement())
    title   String?
    comment String?

    assignmentId Int
    studentId    Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Student                        User                             @relation(fields: [studentId], references: [id])
    Assignment                     Assignment                       @relation(fields: [assignmentId], references: [id])
    AssignmentSubmissionAttachment AssignmentSubmissionAttachment[]
}

model AssignmentSubmissionAttachment {
    id      Int    @id @default(autoincrement())
    fileURL String

    assignmentSubmissionId Int

    AssignmentSubmission AssignmentSubmission @relation(fields: [assignmentSubmissionId], references: [id])
}

model StudentProgress {
    id Int @id @default(autoincrement())

    subjectMaterialId Int
    studentId         Int

    isDone Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    SubjectMaterial SubjectMaterial @relation(fields: [subjectMaterialId], references: [id])
    Student         User            @relation(fields: [studentId], references: [id])
}

model StudentEnrolledSubject {
    id Int @id @default(autoincrement())

    studentId        Int
    teacherSubjectId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    student        User                   @relation(fields: [studentId], references: [id])
    teacherSubject TeacherAssignedSubject @relation(fields: [teacherSubjectId], references: [id])
}

model Subject {
    id    Int    @id @default(autoincrement())
    title String

    classLevelId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    coverImgUrl String? @db.Text

    TeacherAssignedSubject TeacherAssignedSubject[]

    classLevel ClassLevel @relation(fields: [classLevelId], references: [id])

    SubjectMaterial SubjectMaterial[]
    Question        Question[]
}

model SubjectMaterial {
    id          Int    @id @default(autoincrement())
    description String

    subjectId Int

    materialType MaterialType?

    fileURL String?

    mdContentId Int?                      @unique
    mdContent   SubjectMaterialMDContent? @relation(fields: [mdContentId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    subject                      Subject                        @relation(fields: [subjectId], references: [id])
    StudentProgress              StudentProgress[]
    SubjectMaterialQuizQuestions SubjectMaterialQuizQuestions[]
    QuizSession                  QuizSession[]
}

model SubjectMaterialQuizQuestions {
    id                Int             @id @default(autoincrement())
    subjectMaterialId Int
    subjectMaterial   SubjectMaterial @relation(fields: [subjectMaterialId], references: [id])
    questionId        Int
    question          Question        @relation(fields: [questionId], references: [id])
}

model SubjectMaterialMDContent {
    id              Int              @id @default(autoincrement())
    content         String           @db.LongText
    SubjectMaterial SubjectMaterial?
}

enum MaterialType {
    DOCUMENT
    QUIZ
    MD
}

model Question {
    id                           Int                            @id @default(autoincrement())
    text                         String
    type                         QuestionType
    subjectId                    Int
    subject                      Subject                        @relation(fields: [subjectId], references: [id])
    choices                      Choice[]
    createdAt                    DateTime                       @default(now())
    updatedAt                    DateTime                       @updatedAt
    SubjectMaterialQuizQuestions SubjectMaterialQuizQuestions[]
    AnswerKey                    AnswerKey?
}

model AnswerKey {
    id          Int      @id @default(autoincrement())
    explanation String?
    questionId  Int      @unique
    question    Question @relation(fields: [questionId], references: [id])
}

model Choice {
    id                 Int                 @id @default(autoincrement())
    text               String
    isCorrect          Boolean             @default(false)
    questionId         Int
    question           Question            @relation(fields: [questionId], references: [id])
    QuizSessionAnswers QuizSessionAnswer[]
}

enum QuestionType {
    MULTIPLE_CHOICE
    TRUE_FALSE
    ESSAY
}

model QuizSession {
    id        Int @id @default(autoincrement())
    studentId Int
    quizId    Int

    createdAt DateTime @default(now())

    student           User                @relation(fields: [studentId], references: [id])
    quiz              SubjectMaterial     @relation(fields: [quizId], references: [id])
    QuizSessionAnswer QuizSessionAnswer[]
}

model QuizSessionAnswer {
    id         Int     @id @default(autoincrement())
    sessionId  Int
    answerText String?
    choiceId   Int?

    session QuizSession @relation(fields: [sessionId], references: [id])
    choice  Choice?     @relation(fields: [choiceId], references: [id])
}

model MeetingSession {
    id        Int    @id @default(autoincrement())
    uuid      String
    meetingID String
    hostID    String
    hostEmail String
    topic     String
    startURL  String @db.Text
    joinURL   String @db.Text
    password  String

    authCode String? @unique

    onGoing Boolean?

    teacherAssignedSubjectId Int

    createdBy Int

    teacher        User                   @relation(fields: [createdBy], references: [id])
    teacherSubject TeacherAssignedSubject @relation(fields: [teacherAssignedSubjectId], references: [id])
}

model ClassLevel {
    id Int @id @default(autoincrement())

    level Int

    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    ClassSection ClassSection[]
    Subject      Subject[]
}

model ClassSection {
    id Int @id @default(autoincrement())

    sectionName String

    classLevelId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    classLevel ClassLevel @relation(fields: [classLevelId], references: [id])
}
